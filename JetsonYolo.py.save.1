'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light',
                'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
                'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee',
                'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard',
                'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',
                'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch',
                'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
                'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear',
                'hair drier', 'toothbrush'from imutils.video import VideoStream
from imutils.video import FPS
from imutils.object_detection import non_max_suppression
import numpy as np
import argparse
import pytesseract
import imutils
import time
import cv2
from elements.yolo import OBJ_DETECTION
from runit import VESC
import time
from adafruit_servokit import ServoKit

k = ServoKit(channels=16)

Object_classes = ['apple']

Object_colors = list(np.random.rand(80,3)*255)
Object_detector = OBJ_DETECTION('weights/yolov5s.pt', Object_classes)

# To flip the image, modify the flip_method parameter (0 and 2 are the most common)
#print(gstreamer_pipeline(flip_method=

# To flip the image, modify the flip_method parameter (0 and 2 are the most common)
cap = cv2.VideoCapture(0)

text = 'apple'
vesc = VESC('/dev/ttyACM0')

if cap.isOpened():
    window_handle = cv2.namedWindow("CSI Camera", cv2.WINDOW_AUTOSIZE)
    # Window
    label = ' '
    while True:
        ret, frame = cap.read()
        #cv2.resizeWindow(frame, 640, 640)
        # detection process
        objs = Object_detector.detect(frame)
        cv2.imshow("CSI Camera", frame)
        # plotting
        if  label != text:
            vesc.run(0.1, 0.1)
        '''elif label == text:
            print(2)
            vesc.run(0.5, 0.2)
            import time
            time.sleep(3)'''
        for obj in objs:
            # print(obj)
            label = obj['label']
            score = obj['score']
            [(xmin,ymin),(xmax,ymax)] = obj['bbox']
            color = Object_colors[Object_classes.index(label)]
            frame = cv2.rectangle(frame, (xmin,ymin), (xmax,ymax), color, 2) 
            frame = cv2.putText(frame, f'{label} ({str(score)})', (xmin,ymin), cv2.FONT_HERSHEY_SIMPLEX , 0.75, color, 1, cv2.LINE_AA)
            cntr = [(xmin+xmax)/2,(ymin+ymax)/2]
            print(label, cntr, text)
        try:
            if cntr[0] - 320 > 15:
                vesc.run(0.8, 0.2)
            elif cntr[0] - 320 < -15:
                vesc.run(0.2, 0.2)
            else:
                vesc.run(0.5, 0.2)
        except:
            pass
        try:
            area = ((xmax - xmin)*(ymax-ymin))
            print(area)
            if area >= 95000:
                vesc.run(0.5, 0.0)
                k.continuous_servo[0].throttle = 1
        except:
            pass 
        cv2.imshow("CSI Camera", frame)

        #print(area)
        keyCode = cv2.waitKey(30)
        if keyCode == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()
else:
    print("Unable to open camera")
